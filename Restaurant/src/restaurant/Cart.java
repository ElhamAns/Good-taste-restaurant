package restaurant;

import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import restaurant.OrderMethod;



/**
 *
 * @author mahab
 */
public class Cart extends javax.swing.JFrame {
    public static double  Total;
    int cus_ID = CustomerLogin.id;
            
    int Item_ID;
    public static ArrayList<cartTable> CartArray = new ArrayList<cartTable>();
    
    DefaultTableModel model;
    
    public static class cartTable{
        public String item_name;
        public int qty;
        public int price;
        
        //con
        public cartTable(String item_name, int qty, int price){
            this.item_name=item_name;
            this.qty=qty;
            this.price=price*qty;
        }
    }

    
    private static String DEFAULT_QUERY= "SELECT * From customer";
    
    
    private Connection connection=null;
    private Statement statement=null;
    private ResultSet resultSet=null;
    //private PreparedStatement Pstatement=null;
    
    
    public void openDB(){
        try{
            connection=DriverManager.getConnection(Restaurant.DATABASE_URL,Restaurant.USER,Restaurant.PASS);
            statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
            resultSet = statement.executeQuery(DEFAULT_QUERY);
        }
        catch(SQLException ex){
            JOptionPane.showMessageDialog(null, ex);
        }
    }
    
    
    public void closeDB(){
        try{
            resultSet.close();
            statement.close();
            connection.close();
        }
        catch(SQLException ex){
            ex.printStackTrace();
            
        }
    }
    
    public ArrayList< cartTable > retrieve_cartArray(ArrayList< cartTable > cartArray){
        //ArrayList< cartTable > cartArray=null;
        try{
            resultSet = statement.executeQuery(
                        "SELECT Item, Item_quantity, Price\n" +
                        "FROM cart\n" +
                        "INNER JOIN menu \n" +
                        "WHERE Customer_NO = "+ cus_ID +" and cart.Item_ID = menu.Item_ID;");
            cartArray = new ArrayList< cartTable >();
            
            //cartTable.setModel(DbUtils.resultSetToTableModel(resultSet));
            while(resultSet.next()){
                cartArray.add(new cartTable(
                       resultSet.getString("Item"),
                       resultSet.getInt("Item_quantity"),
                       resultSet.getInt("Price")));
                
            }
        }
        catch(SQLException ex){
            JOptionPane.showMessageDialog(null, ex);
        }
        return cartArray;
    }
    
    public void displayCart(ArrayList< cartTable > cartArray){
        model = (DefaultTableModel) cartTable.getModel();
        Object rowData[]=new Object[3];//3 is the number of columns
        
        for(int i=0; i<cartArray.size(); i++){
            rowData[0] =  cartArray.get(i).item_name;
            rowData[1] =  cartArray.get(i).qty;
            rowData[2] =  cartArray.get(i).price;
            model.addRow(rowData);
            
        }
        
        
    }
    
    public double calcTotal(ArrayList<cartTable> cartArray ){
        double Total=0;
        for(int i=0; i<cartArray.size(); i++){
            Total+=cartArray.get(i).price;
        }
        
        Total=(Total*0.15)+Total;
        return Total;
    }
    public Cart() {
        super("Cart");
        initComponents();
        setIconImage();
        openDB();
        CartArray=retrieve_cartArray(CartArray);
        displayCart(CartArray);
        //Total=calcTotal(retrieve_cartArray());
        
    }
    
    private void setIconImage() 
    {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("Icon.jpg")));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Cart_Panel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        cartTable = new javax.swing.JTable();
        Purchase_button = new javax.swing.JButton();
        Delete_button = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Cart_Panel.setBackground(new java.awt.Color(255, 255, 255));

        cartTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item name", "Quantity", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(cartTable);

        Purchase_button.setText("Purchase");
        Purchase_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Purchase_buttonActionPerformed(evt);
            }
        });

        Delete_button.setText("Delete");
        Delete_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Delete_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Cart_PanelLayout = new javax.swing.GroupLayout(Cart_Panel);
        Cart_Panel.setLayout(Cart_PanelLayout);
        Cart_PanelLayout.setHorizontalGroup(
            Cart_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Cart_PanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Delete_button)
                .addGap(18, 18, 18)
                .addComponent(Purchase_button)
                .addContainerGap())
        );
        Cart_PanelLayout.setVerticalGroup(
            Cart_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Cart_PanelLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Cart_PanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Purchase_button)
                    .addComponent(Delete_button))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Cart_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Cart_Panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Purchase_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Purchase_buttonActionPerformed
        Total=calcTotal(CartArray);
        closeDB();
        OrderMethod frame = new OrderMethod();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_Purchase_buttonActionPerformed

    private void Delete_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Delete_buttonActionPerformed
        //delete selected row
        int row = cartTable.getSelectedRow();
        String Item_name = cartTable.getModel().getValueAt(row, 0).toString();
        
        
        if(cartTable.getSelectedRowCount()==1){
            try{
                //retrive from menu the id
                PreparedStatement Pstatement=null;
                ResultSet P_resultSet=null;
                Pstatement=connection.prepareStatement("SELECT Item_ID FROM menu WHERE Item = ?");
                Pstatement.setString(1, Item_name);
                P_resultSet=Pstatement.executeQuery();
                while(P_resultSet.next()){
                Item_ID = P_resultSet.getInt("Item_ID");
                }
                //delete from cart the item
                Pstatement=connection.prepareStatement("DELETE From cart WHERE Customer_NO = ? AND Item_ID = ? ");
                Pstatement.setInt(1, cus_ID);
                Pstatement.setInt(2, Item_ID);
                Pstatement.executeUpdate();
                model.removeRow(row);
            }
            catch(SQLException ex){
                JOptionPane.showMessageDialog(null, ex);
            }
        }
        else{
            if(cartTable.getRowCount()==0)//if the table is empty
            {
                JOptionPane.showMessageDialog(this, "There is nothing to delete","ERORR",JOptionPane.ERROR_MESSAGE);
            }
            else//if table is not empty but the row not selected
            {
                JOptionPane.showMessageDialog(this, "Plese select the item you want to delete","ERORR",JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_Delete_buttonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Cart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Cart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Cart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Cart().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Cart_Panel;
    private javax.swing.JButton Delete_button;
    private javax.swing.JButton Purchase_button;
    private javax.swing.JTable cartTable;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
